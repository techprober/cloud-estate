#!/bin/bash

set -euo pipefail

build_type=
clone_vm_id=
vm_id=
vm_type=
vm_name=
only=false
only_opt=
var_file=
host_config=
template=

# Proxmox Builder

# --- Arguments Parsing --- #

available_vm() {
  [[ -n ${1:-} ]] && echo "$1"
  cat << EOF

Desciption: A powerful script that bakes custom vm template with packer

Usage: bake [options] [arguments]

Available VM templates:

- debian-12-server
- ubuntu-2004-server
- ubuntu-2204-server
- docker-ubuntu-2204-server
- containerd-ubuntu-2204-server
- cn-ubuntu-2204-server
- custom

[Warning]: options must be passed before perfoming the actual action

EOF
  exit 1
}

print_help() {
  [[ -n ${1:-} ]] && echo "$1"
  cat << EOF

Desciption: A powerful script that bakes custom vm template with packer

Usage: bake [options] [arguments]

Available Options:

-h, --help           Print help message
-a, --all            Print available VM type

-i, --vmid           [required|number]  VM ID (default: 9000)
-t, --type           [required|string]  Type of VM to be baked, use -a to see all the available VM type

-n, --name           [optional|string]  VM name
-b, --build          [optional|string]  Use custom type of build defined in packer template
-f, --var-file       [optional|string]  Custom packer var-file path (default: ./vars/ubuntu-2204.json)
-c, --config         [optional|string]  Custom host config path

Basic Usage:   ./bake -t ubuntu-2204-server

Advance Usage: ./bake -i 9001 -t debian_12_server -n prod-debian-12-server-template -c ./host.json -f ./vars/kevin-ubuntu-2204.json

[Warning]: options must be passed before perfoming the actual action

EOF
  exit 1
}

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
cd "${ROOT}"

function echoW {
  echo;
  echo -e "\033[1;37m########## $@\033[0m";
}

# transform long options (--) to short ones (-) as only such are supported by bash built-in argparse
for arg in "$@"; do
  shift
  case "$arg" in
    "--help")     set -- "$@" "-h" ;;
    "--all")      set -- "$@" "-a" ;;
    "--vmid")     set -- "$@" "-v" ;;
    "--type")     set -- "$@" "-t" ;;
    "--name")     set -- "$@" "-n" ;;
    "--build")    set -- "$@" "-b" ;;
    "--var-file") set -- "$@" "-f" ;;
    "--config")   set -- "$@" "-c" ;;
    "--"*)        print_help "[Error]: Unknown option: "$arg"" >&2; exit;;
    *)            set -- "$@" "$arg"
  esac
done

# handle argument parsing
while getopts ":hai:t:n:b:f:c:d:" opt; do
  case $opt in
    # print help message
    h|--help) print_help; exit;;
    # print available vm templates
    a|--all) available_vm; exit;;
    # pass vm id
    i|--vmid) vm_id=$OPTARG;;
    # pass vm type
    t|--type) vm_type=$OPTARG;;
    # pass vm name
    n|--name) vm_name=$OPTARG;;
    # specify custom-build build type
    b|--build) build_type=$OPTARG;;
    # specify host config path, e.g: ./host.json
    c|--config) host_config=$OPTARG;;
    # specify packer var-file path, e.g: ./vars/ubuntu-2204.json
    f|--var-file) var_file=$OPTARG;;
    # unknown option
   \?) print_help "[Error]: Unknown option: -"$OPTARG"" >&2; exit;;
    # invalid option
    :) print_help "[Error]: Option -"$OPTARG" requires an argument" >&2; exit;;
  esac
done

[[ ! $(jq -c 'keys' bakery-config.json | cat) =~ .*\"${vm_type}\".* ]] && { echo "[Error]: VM template: '${vm_type}' not found in bakery-config.json"; exit 1; }
[[ ! -z "$host_config" ]] && host_config=$host_config || host_config="./host.json"
[[ ! -z "$var_file" ]] && var_file=$var_file || var_file="./vars/ubuntu-2204.json"
[[ ! -z "$vm_id" ]] && vm_id=$vm_id || vm_id=9000
[[ ! -z "$vm_name" ]] && vm_name=$vm_name || vm_name=$vm_type
build_type=$(cat bakery-config.json | jq ".${vm_type}.os" | tr -d '""')
clone_vm_id=$(cat $var_file | jq '.clone_vm_id' | tr -d '""')
[[ ! -z "$build_type" ]] && template="${build_type}-proxmox-packer-template.pkr.hcl"

# --- Main Operation --- #

echoW "Baking ${vm_name} template with packer\n"

packer build -force \
  -var-file ${var_file} \
  -var-file ${host_config} \
  -var playbook_file="playbooks/${vm_type}.yml" \
  -var template_name=$vm_name \
  -var proxmox_api_password=$PM_PASS \
  -var vm_id=$vm_id \
  $template
